{"ast":null,"code":"var _jsxFileName = \"/Users/anoushkabhat/Desktop/FinalProject/CS35L/src/pages/googlemaps.js\";\nimport React from 'react';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '600px',\n  height: '600px'\n};\n\n//latitude and longitude \nconst center = {\n  lat: 34.0699,\n  lng: -118.45\n};\n\n//creating a fronted function, which contians google maps api, and then specifies how much to zoom \nfunction MyComponent() {\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyDcT8vjUTGgqt6qgDd-15ZDqPIJK8Fqqrk\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 15,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_c = MyComponent;\nexport default _c2 = /*#__PURE__*/React.memo(MyComponent);\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nlet map;\nlet marker;\nlet geocoder;\nlet responseDiv;\nlet response;\nfunction initMap() {\n  map = new google.maps.Map(document.getElementById(\"map\"), {\n    zoom: 8,\n    center: {\n      lat: -34.397,\n      lng: 150.644\n    },\n    mapTypeControl: false\n  });\n  geocoder = new google.maps.Geocoder();\n  const inputText = document.createElement(\"input\");\n  inputText.type = \"text\";\n  inputText.placeholder = \"Enter a location\";\n  const submitButton = document.createElement(\"input\");\n  submitButton.type = \"button\";\n  submitButton.value = \"Geocode\";\n  submitButton.classList.add(\"button\", \"button-primary\");\n  const clearButton = document.createElement(\"input\");\n  clearButton.type = \"button\";\n  clearButton.value = \"Clear\";\n  clearButton.classList.add(\"button\", \"button-secondary\");\n  response = document.createElement(\"pre\");\n  response.id = \"response\";\n  response.innerText = \"\";\n  responseDiv = document.createElement(\"div\");\n  responseDiv.id = \"response-container\";\n  responseDiv.appendChild(response);\n  const instructionsElement = document.createElement(\"p\");\n  instructionsElement.id = \"instructions\";\n  instructionsElement.innerHTML = \"<strong>Instructions</strong>: Enter an address in the textbox to geocode or click on the map to reverse geocode.\";\n  map.controls[google.maps.ControlPosition.TOP_LEFT].push(inputText);\n  map.controls[google.maps.ControlPosition.TOP_LEFT].push(submitButton);\n  map.controls[google.maps.ControlPosition.TOP_LEFT].push(clearButton);\n  map.controls[google.maps.ControlPosition.LEFT_TOP].push(instructionsElement);\n  map.controls[google.maps.ControlPosition.LEFT_TOP].push(responseDiv);\n  marker = new google.maps.Marker({\n    map\n  });\n  map.addListener(\"click\", e => {\n    geocode({\n      location: e.latLng\n    });\n  });\n  submitButton.addEventListener(\"click\", () => geocode({\n    address: inputText.value\n  }));\n  clearButton.addEventListener(\"click\", () => {\n    clear();\n  });\n  clear();\n}\nfunction clear() {\n  marker.setMap(null);\n}\nfunction geocode(request) {\n  clear();\n  geocoder.geocode(request).then(result => {\n    const {\n      results\n    } = result;\n    map.setCenter(results[0].geometry.location);\n    marker.setPosition(results[0].geometry.location);\n    marker.setMap(map);\n    response.innerText = JSON.stringify(result, null, 2);\n    return results;\n  }).catch(e => {\n    alert(\"Geocode was not successful for the following reason: \" + e);\n  });\n}\nwindow.initMap = initMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"MyComponent\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","GoogleMap","LoadScript","Fragment","_Fragment","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MyComponent","googleMapsApiKey","children","mapContainerStyle","zoom","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","memo","map","marker","geocoder","responseDiv","response","initMap","google","maps","Map","document","getElementById","mapTypeControl","Geocoder","inputText","createElement","type","placeholder","submitButton","value","classList","add","clearButton","id","innerText","appendChild","instructionsElement","innerHTML","controls","ControlPosition","TOP_LEFT","push","LEFT_TOP","Marker","addListener","e","geocode","location","latLng","addEventListener","address","clear","setMap","request","then","result","results","setCenter","geometry","setPosition","JSON","stringify","catch","alert","window","$RefreshReg$"],"sources":["/Users/anoushkabhat/Desktop/FinalProject/CS35L/src/pages/googlemaps.js"],"sourcesContent":["import React from 'react'\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '600px',\n  height: '600px'\n};\n\n\n//latitude and longitude \nconst center = {\n  lat: 34.0699,\n  lng: -118.45\n};\n\n\n//creating a fronted function, which contians google maps api, and then specifies how much to zoom \nfunction MyComponent() {\n  return (\n    <LoadScript\n      googleMapsApiKey=\"AIzaSyDcT8vjUTGgqt6qgDd-15ZDqPIJK8Fqqrk\"\n    >\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={15}\n      >\n        { /* Child components, such as markers, info windows, etc. */ }\n        <></>\n      </GoogleMap>\n    </LoadScript>\n  )\n}\n\nexport default React.memo(MyComponent)\n\n\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n let map;\n let marker;\n let geocoder;\n let responseDiv;\n let response;\n \n function initMap() {\n   map = new google.maps.Map(document.getElementById(\"map\"), {\n     zoom: 8,\n     center: { lat: -34.397, lng: 150.644 },\n     mapTypeControl: false,\n   });\n   geocoder = new google.maps.Geocoder();\n \n   const inputText = document.createElement(\"input\");\n \n   inputText.type = \"text\";\n   inputText.placeholder = \"Enter a location\";\n \n   const submitButton = document.createElement(\"input\");\n \n   submitButton.type = \"button\";\n   submitButton.value = \"Geocode\";\n   submitButton.classList.add(\"button\", \"button-primary\");\n \n   const clearButton = document.createElement(\"input\");\n \n   clearButton.type = \"button\";\n   clearButton.value = \"Clear\";\n   clearButton.classList.add(\"button\", \"button-secondary\");\n   response = document.createElement(\"pre\");\n   response.id = \"response\";\n   response.innerText = \"\";\n   responseDiv = document.createElement(\"div\");\n   responseDiv.id = \"response-container\";\n   responseDiv.appendChild(response);\n \n   const instructionsElement = document.createElement(\"p\");\n \n   instructionsElement.id = \"instructions\";\n   instructionsElement.innerHTML =\n     \"<strong>Instructions</strong>: Enter an address in the textbox to geocode or click on the map to reverse geocode.\";\n   map.controls[google.maps.ControlPosition.TOP_LEFT].push(inputText);\n   map.controls[google.maps.ControlPosition.TOP_LEFT].push(submitButton);\n   map.controls[google.maps.ControlPosition.TOP_LEFT].push(clearButton);\n   map.controls[google.maps.ControlPosition.LEFT_TOP].push(\n     instructionsElement\n   );\n   map.controls[google.maps.ControlPosition.LEFT_TOP].push(responseDiv);\n   marker = new google.maps.Marker({\n     map,\n   });\n   map.addListener(\"click\", (e) => {\n     geocode({ location: e.latLng });\n   });\n   submitButton.addEventListener(\"click\", () =>\n     geocode({ address: inputText.value })\n   );\n   clearButton.addEventListener(\"click\", () => {\n     clear();\n   });\n   clear();\n }\n \n function clear() {\n   marker.setMap(null);\n }\n \n function geocode(request) {\n   clear();\n   geocoder\n     .geocode(request)\n     .then((result) => {\n       const { results } = result;\n \n       map.setCenter(results[0].geometry.location);\n       marker.setPosition(results[0].geometry.location);\n       marker.setMap(map);\n       response.innerText = JSON.stringify(result, null, 2);\n       return results;\n     })\n     .catch((e) => {\n       alert(\"Geocode was not successful for the following reason: \" + e);\n     });\n }\n \n window.initMap = initMap;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}